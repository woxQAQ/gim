{
	"components": {
		"schemas": {
			"GetMessageHistoryRequest": {
				"description": "GetMessageHistoryRequest schema",
				"properties": {
					"page_size": {
						"type": "integer"
					},
					"page_token": {
						"nullable": true,
						"type": "string"
					},
					"user_id": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"HTTPError": {
				"description": "HTTPError schema",
				"properties": {
					"detail": {
						"description": "Human readable error message",
						"nullable": true,
						"type": "string"
					},
					"errors": {
						"items": {
							"properties": {
								"more": {
									"additionalProperties": {},
									"type": "object"
								},
								"name": {
									"type": "string"
								},
								"reason": {
									"type": "string"
								}
							},
							"type": "object"
						},
						"nullable": true,
						"type": "array"
					},
					"instance": {
						"nullable": true,
						"type": "string"
					},
					"status": {
						"description": "HTTP status code",
						"example": 403,
						"nullable": true,
						"type": "integer"
					},
					"title": {
						"description": "Short title of the error",
						"nullable": true,
						"type": "string"
					},
					"type": {
						"description": "URL of the error type. Can be used to lookup the error in a documentation",
						"nullable": true,
						"type": "string"
					}
				},
				"type": "object"
			},
			"LoginRequest": {
				"description": "LoginRequest schema",
				"properties": {
					"password": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object"
			},
			"MessageHistoryResponse": {
				"description": "MessageHistoryResponse schema",
				"properties": {
					"messages": {
						"items": {
							"nullable": true,
							"properties": {
								"content": {
									"type": "string"
								},
								"created_at": {
									"format": "date-time",
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"receiver_id": {
									"type": "string"
								},
								"sender_id": {
									"type": "string"
								},
								"status": {
									"format": "int32",
									"type": "integer"
								},
								"type": {
									"format": "int32",
									"type": "integer"
								}
							},
							"type": "object"
						},
						"type": "array"
					},
					"next_token": {
						"nullable": true,
						"type": "string"
					}
				},
				"type": "object"
			},
			"RegisterRequest": {
				"description": "RegisterRequest schema",
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object"
			},
			"UserResponse": {
				"description": "UserResponse schema",
				"properties": {
					"avatar": {
						"type": "string"
					},
					"bio": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"gender": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"nickname": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"status": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				},
				"type": "object"
			},
			"unknown-interface": {
				"description": "unknown-interface schema"
			}
		}
	},
	"info": {
		"description": "\nThis is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.\n\nBelow is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.github.io/fuego) for more details.\n\nHappy coding! üî•\n\n## Usage\n\n### Route registration\n\n```go\nfunc main() {\n\t// Create a new server\n\ts := fuego.NewServer()\n\n\t// Register some routes\n\tfuego.Post(s, \"/hello\", myController)\n\tfuego.Get(s, \"/myPath\", otherController)\n\tfuego.Put(s, \"/hello\", thirdController)\n\n\tadminRoutes := fuego.Group(s, \"/admin\")\n\tfuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, \n\tfuego.Get(adminRoutes, \"/hello\", groupController) // This route will be available at /admin/hello\n\n\t// Start the server\n\ts.Start()\n}\n```\n\n### Basic controller\n\n```go\ntype MyBody struct {\n\tName string `json:\"name\" validate:\"required,max=30\"`\n}\n\ntype MyResponse struct {\n\tAnswer string `json:\"answer\"`\n}\n\nfunc hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {\n\tbody, err := ctx.Body()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn \u0026MyResponse{Answer: \"Hello \" + body.Name}, nil\n}\n```\n\n### Add openAPI information to the route\n\n```go\nimport (\n\t\"github.com/go-fuego/fuego\"\n\t\"github.com/go-fuego/fuego/option\"\n\t\"github.com/go-fuego/fuego/param\"\n)\n\nfunc main() {\n\ts := fuego.NewServer()\n\n\t// Custom OpenAPI options\n\tfuego.Post(s, \"/\", myController\n\t\toption.Description(\"This route does something...\"),\n\t\toption.Summary(\"This is my summary\"),\n\t\toption.Tags(\"MyTag\"), // A tag is set by default according to the return type (can be deactivated)\n\t\toption.Deprecated(), // Marks the route as deprecated in the OpenAPI spec\n\n\t\toption.Query(\"name\", \"Declares a query parameter with default value\", param.Default(\"Carmack\")),\n\t\toption.Header(\"Authorization\", \"Bearer token\", param.Required()),\n\t\toptionPagination,\n\t\toptionCustomBehavior,\n\t)\n\n\ts.Run()\n}\n\nvar optionPagination = option.Group(\n\toption.QueryInt(\"page\", \"Page number\", param.Default(1), param.Example(\"1st page\", 1), param.Example(\"42nd page\", 42)),\n\toption.QueryInt(\"perPage\", \"Number of items per page\"),\n)\n\nvar optionCustomBehavior = func(r *fuego.BaseRoute) {\n\tr.XXX = \"YYY\"\n}\n```\n\nThen, in the controller\n\n```go\ntype MyResponse struct {\n\tAnswer string `json:\"answer\"`\n}\n\nfunc getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {\n\tname := ctx.QueryParam(\"name\")\n\tperPage, _ := ctx.QueryParamIntErr(\"per_page\")\n\n\treturn \u0026MyResponse{Answer: \"Hello \" + name}, nil\n}\n```\n",
		"title": "OpenAPI",
		"version": "0.0.1"
	},
	"openapi": "3.1.0",
	"paths": {
		"/api/v1/messages/history": {
			"get": {
				"description": "#### Controller: \n\n`github.com/woxQAQ/gim/internal/apiserver/controllers.(*MessageController).GetMessageHistory`\n\n#### Middlewares:\n\n- `github.com/woxQAQ/gim/pkg/middleware.Recovery.func1`\n- `github.com/woxQAQ/gim/pkg/middleware.Logger.func1`\n\n---\n\nËé∑ÂèñÊ∂àÊÅØÂéÜÂè≤ËÆ∞ÂΩï",
				"operationId": "GET_/api/v1/messages/history",
				"parameters": [
					{
						"description": "Bearer Token",
						"in": "header",
						"name": "Authentication",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/GetMessageHistoryRequest"
							}
						}
					},
					"description": "Request body for request.GetMessageHistoryRequest",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MessageHistoryResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/MessageHistoryResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get message history",
				"tags": [
					"message"
				]
			}
		},
		"/api/v1/users/login": {
			"post": {
				"description": "#### Controller: \n\n`github.com/woxQAQ/gim/internal/apiserver/controllers.(*UserController).Login`\n\n#### Middlewares:\n\n- `github.com/woxQAQ/gim/pkg/middleware.Recovery.func1`\n- `github.com/woxQAQ/gim/pkg/middleware.Logger.func1`\n\n---\n\nÁî®Êà∑ÁôªÂΩï",
				"operationId": "POST_/api/v1/users/login",
				"parameters": [
					{
						"description": "Bearer Token",
						"in": "header",
						"name": "Authentication",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					},
					"description": "Request body for request.LoginRequest",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "login",
				"tags": [
					"user"
				]
			}
		},
		"/api/v1/users/register": {
			"post": {
				"description": "#### Controller: \n\n`github.com/woxQAQ/gim/internal/apiserver/controllers.(*UserController).Register`\n\n#### Middlewares:\n\n- `github.com/woxQAQ/gim/pkg/middleware.Recovery.func1`\n- `github.com/woxQAQ/gim/pkg/middleware.Logger.func1`\n\n---\n\nÊ≥®ÂÜåÁî®Êà∑",
				"operationId": "POST_/api/v1/users/register",
				"parameters": [
					{
						"description": "Bearer Token",
						"in": "header",
						"name": "Authentication",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"content": {
						"*/*": {
							"schema": {
								"$ref": "#/components/schemas/RegisterRequest"
							}
						}
					},
					"description": "Request body for request.RegisterRequest",
					"required": true
				},
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "register",
				"tags": [
					"user"
				]
			}
		},
		"/api/v1/users/{userId}": {
			"get": {
				"description": "#### Controller: \n\n`github.com/woxQAQ/gim/internal/apiserver/controllers.(*UserController).GetUserInfo`\n\n#### Middlewares:\n\n- `github.com/woxQAQ/gim/pkg/middleware.Recovery.func1`\n- `github.com/woxQAQ/gim/pkg/middleware.Logger.func1`\n\n---\n\nËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ",
				"operationId": "GET_/api/v1/users/:userId",
				"parameters": [
					{
						"description": "Bearer Token",
						"in": "header",
						"name": "Authentication",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "header",
						"name": "Accept",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						},
						"description": "OK"
					},
					"400": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Bad Request _(validation or deserialization error)_"
					},
					"500": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							},
							"application/xml": {
								"schema": {
									"$ref": "#/components/schemas/HTTPError"
								}
							}
						},
						"description": "Internal Server Error _(panics)_"
					},
					"default": {
						"description": ""
					}
				},
				"summary": "get user info",
				"tags": [
					"user"
				]
			}
		}
	},
	"servers": [
		{
			"description": "local server",
			"url": "http://:8081"
		}
	],
	"tags": [
		{
			"name": "message"
		},
		{
			"name": "user"
		}
	]
}